summary(model)
summary(model)
pred <- predict(model,test)
length(pred)
tab<- table(pred,test$CASE_STATUS_1.0)
ltab
tab
agreement <- pred==test$CASE_STATUS_1.0
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(e1071)
# creation of test and train samples
#randomsample=sample_n(df1, 100000)
randomsample=sample_n(df, 100000)
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
library(kernlab)
model<- ksvm(train$CASE_STATUS_1.0~train$DURATION+train$WAGE_RATE_OF_PAY_FROM_HOUR+train$HOURLY_WAGE+train$OCCUPATION,data=train,kernel="vanilladot")
summary(model)
pred <- predict(model,newdata=test)
length(pred)
model<- ksvm(CASE_STATUS_1.0~DURATION+WAGE_RATE_OF_PAY_FROM_HOUR+HOURLY_WAGE+OCCUPATION,data=train,kernel="vanilladot")
summary(model)
pred <- predict(model,newdata=test)
length(pred)
tab<- table(pred,test$CASE_STATUS_1.0)
tab
agreement <- pred==test$CASE_STATUS_1.0
agreement <- pred==test$CASE_STATUS_1.0
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
# Aligning the variables  for required data type
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
#Building the model
modelBinaryNonLinearCaseStatus<- ksvm(CASE_STATUS_1.0~DURATION+WAGE_RATE_OF_PAY_FROM_HOUR+HOURLY_WAGE+OCCUPATION,data=train,kernel="rbfdot")
#Getting summary of the model
summary(modelBinaryNonLinearCaseStatus)
#Prediction of test data
pred <- predict(modelBinaryNonLinearCaseStatus,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$CASE_STATUS_1.0)
tab
#Accuracy check
agreement <- pred==test$CASE_STATUS_1.0
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
# Aligning the variables  for required data type
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
#Building the model
modelBinaryLinearAgentPresent<- ksvm(AGENT_PRESENT_1.0~DURATION+WAGE_RATE_OF_PAY_FROM_HOUR+HOURLY_WAGE+OCCUPATION,data=train,kernel="vanilladot")
#Getting summary of the model
summary(modelBinaryLinearAgentPresent)
#Prediction of test data
pred <- predict(modelBinaryLinearAgentPresent,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$CASE_STATUS_1.0)
tab
tab
#Accuracy check
agreement <- pred==test$CASE_STATUS_1.0
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
# Aligning the variables  for required data type
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
#Building the model
modelBinaryNonLinearAgentPresent<- ksvm(AGENT_PRESENT_1.0~DURATION+WAGE_RATE_OF_PAY_FROM_HOUR+HOURLY_WAGE+OCCUPATION,data=train,kernel="rbfdot")
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
# Aligning the variables  for required data type
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
# Aligning the variables  for required data type
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
#Building the model
modelBinaryNonLinearAgentPresent<- ksvm(AGENT_PRESENT_1.0~DURATION+WAGE_RATE_OF_PAY_FROM_HOUR+HOURLY_WAGE+OCCUPATION,data=train,kernel="rbfdot")
#Prediction of test data
pred <- predict(modelBinaryLinearAgentPresent,newdata=test)
#Getting summary of the model
summary(modelBinaryNonLinearAgentPresent)
#Prediction of test data
pred <- predict(modelBinaryNonLinearAgentPresent,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$CASE_STATUS_1.0)
tab
length(pred)
#Confusion matrix generation
tab<- table(pred,test$AGENT_PRESENT_1.0)
tab
#Accuracy check
agreement <- pred==test$AGENT_PRESENT_1.0
tabag <- table(agreement)
tabag
Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
columns
df <- data.frame(dataset)
#installing packages
library(dplyr)
library(kernlab)
#Creating Train and test data randomly
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
# Aligning the variables  for required data type
train$AGENT_PRESENT_1.0<-as.factor(train$AGENT_PRESENT_1.0)
train$HOURLY_WAGE<-as.numeric(train$HOURLY_WAGE)
train$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(train$WAGE_RATE_OF_PAY_FROM_HOUR)
train$DURATION<-as.numeric(train$DURATION)
train$CASE_STATUS_1.0<-as.factor(train$CASE_STATUS_1.0)
test$AGENT_PRESENT_1.0<-as.factor(test$AGENT_PRESENT_1.0)
test$HOURLY_WAGE<-as.numeric(test$HOURLY_WAGE)
test$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(test$WAGE_RATE_OF_PAY_FROM_HOUR)
test$DURATION<-as.numeric(test$DURATION)
test$CASE_STATUS_1.0<-as.factor(test$CASE_STATUS_1.0)
#Building the model
modelBinaryLinearAgentPresent<- ksvm(AGENT_PRESENT_1.0~DURATION+WAGE_RATE_OF_PAY_FROM_HOUR+HOURLY_WAGE+OCCUPATION,data=train,kernel="vanilladot")
#Getting summary of the model
summary(modelBinaryLinearAgentPresent)
#Prediction of test data
pred <- predict(modelBinaryLinearAgentPresent,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$AGENT_PRESENT_1.0)
tab
#Accuracy check
agreement <- pred==test$AGENT_PRESENT_1.0
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
dataset$CASE_STATUS_0.0 <- NULL
dataset$AGENT_PRESENT_0.0 <- NULL
#aligning the variables
str(dataset)
dataset$CASE_STATUS_1.0 <- as.factor(dataset$CASE_STATUS_1.0)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$AGENT_PRESENT_1.0 <- as.factor(dataset$AGENT_PRESENT_1.0)
#dataset$AGENT_PRESENT_0.0 <- as.factor(dataset$AGENT_PRESENT_0.0)
dataset$OCCUPATION <- as.factor(dataset$OCCUPATION)
dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(dataset$WAGE_RATE_OF_PAY_FROM_HOUR)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$AGENT_PRESENT_1.0 <- as.factor(dataset$AGENT_PRESENT_1.0)
#dataset$AGENT_PRESENT_0.0 <- as.factor(dataset$AGENT_PRESENT_0.0)
dataset$OCCUPATION <- as.factor(dataset$OCCUPATION)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(dataset$WAGE_RATE_OF_PAY_FROM_HOUR)
dataset$HOURLY_WAGE<-as.numeric(dataset$HOURLY_WAGE)
#dataset$WAGE_RATE_OF_PAY_FROM_HOUR_RANGE = cut(dataset$WAGE_RATE_OF_PAY_FROM_HOUR,c(0,10,20,30,40,50,60,70,80,90,100))
#dataset$HOURLY_WAGE_RANGE = cut(dataset$HOURLY_WAGE,c(0,10,20,30,40,50,60,70,80,90,100))
dataset$DURATION_RANGE = cut(dataset$DURATION,c(0,10,20,30,40,50,60,70,80,90,100))
# creation of test and train samples
df <- data.frame(dataset)
#install.packages("dplyr")
library(dplyr)
library(kernlab)
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
dataset$CASE_STATUS_0.0 <- NULL
dataset$AGENT_PRESENT_0.0 <- NULL
#aligning the variables
str(dataset)
dataset$CASE_STATUS_1.0 <- as.factor(dataset$CASE_STATUS_1.0)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$AGENT_PRESENT_1.0 <- as.factor(dataset$AGENT_PRESENT_1.0)
#dataset$AGENT_PRESENT_0.0 <- as.factor(dataset$AGENT_PRESENT_0.0)
dataset$OCCUPATION <- as.factor(dataset$OCCUPATION)
dataset$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(dataset$WAGE_RATE_OF_PAY_FROM_HOUR)
dataset$HOURLY_WAGE<-as.numeric(dataset$HOURLY_WAGE)
#dataset$WAGE_RATE_OF_PAY_FROM_HOUR_RANGE = cut(dataset$WAGE_RATE_OF_PAY_FROM_HOUR,c(0,10,20,30,40,50,60,70,80,90,100))
#dataset$HOURLY_WAGE_RANGE = cut(dataset$HOURLY_WAGE,c(0,10,20,30,40,50,60,70,80,90,100))
dataset$DURATION_RANGE = cut(dataset$DURATION,c(0,10,20,30,40,50,60,70,80,90,100))
# creation of test and train samples
df <- data.frame(dataset)
#install.packages("dplyr")
library(dplyr)
library(kernlab)
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
memory.limit(size = 99999999999)
#applying the model
modelMulticlassLinearDuration<- ksvm(DURATION_RANGE~.,data=train,kernel="rbfdot")
#Getting summary of the model
summary(modelMulticlassLinearDuration)
#Prediction of test data
pred <- predict(modelMulticlassLinearDuration,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$DURATION_RANGE)
tab
#Accuracy check
agreement <- pred==test$DURATION_RANGE
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
dataset$CASE_STATUS_0.0 <- NULL
dataset$AGENT_PRESENT_0.0 <- NULL
#aligning the variables
str(dataset)
dataset$CASE_STATUS_1.0 <- as.factor(dataset$CASE_STATUS_1.0)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$AGENT_PRESENT_1.0 <- as.factor(dataset$AGENT_PRESENT_1.0)
#dataset$AGENT_PRESENT_0.0 <- as.factor(dataset$AGENT_PRESENT_0.0)
dataset$OCCUPATION <- as.factor(dataset$OCCUPATION)
dataset$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(dataset$WAGE_RATE_OF_PAY_FROM_HOUR)
dataset$HOURLY_WAGE<-as.numeric(dataset$HOURLY_WAGE)
#dataset$WAGE_RATE_OF_PAY_FROM_HOUR_RANGE = cut(dataset$WAGE_RATE_OF_PAY_FROM_HOUR,c(0,10,20,30,40,50,60,70,80,90,100))
#dataset$HOURLY_WAGE_RANGE = cut(dataset$HOURLY_WAGE,c(0,10,20,30,40,50,60,70,80,90,100))
dataset$DURATION_RANGE = cut(dataset$DURATION,c(0,10,20,30,40,50,60,70,80,90,100))
# creation of test and train samples
df <- data.frame(dataset)
#install.packages("dplyr")
library(dplyr)
library(kernlab)
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
memory.limit(size = 99999999999)
#applying the model
modelMulticlassNonLinearDuration<- ksvm(DURATION_RANGE~.,data=train,kernel="vanilladot")
#Getting summary of the model
summary(modelMulticlassNonLinearDuration)
#Prediction of test data
pred <- predict(modelMulticlassNonLinearDuration,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$DURATION_RANGE)
tab
#Accuracy check
agreement <- pred==test$DURATION_RANGE
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
#attach(dataset)
dataset$CASE_STATUS_0.0 <- NULL
dataset$AGENT_PRESENT_0.0 <- NULL
#aligning the variables
str(dataset)
dataset$CASE_STATUS_1.0 <- as.factor(dataset$CASE_STATUS_1.0)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$AGENT_PRESENT_1.0 <- as.factor(dataset$AGENT_PRESENT_1.0)
#dataset$AGENT_PRESENT_0.0 <- as.factor(dataset$AGENT_PRESENT_0.0)
dataset$OCCUPATION <- as.factor(dataset$OCCUPATION)
dataset$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(dataset$WAGE_RATE_OF_PAY_FROM_HOUR)
dataset$HOURLY_WAGE<-as.numeric(dataset$HOURLY_WAGE)
#dataset$WAGE_RATE_OF_PAY_FROM_HOUR_RANGE = cut(dataset$WAGE_RATE_OF_PAY_FROM_HOUR,c(0,10,20,30,40,50,60,70,80,90,100))
#dataset$HOURLY_WAGE_RANGE = cut(dataset$HOURLY_WAGE,c(0,10,20,30,40,50,60,70,80,90,100))
dataset$DURATION_RANGE = cut(dataset$DURATION,c(0,10,20,30,40,50,60,70,80,90,100))
# creation of test and train samples
df <- data.frame(dataset)
#install.packages("dplyr")
library(dplyr)
library(kernlab)
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
memory.limit(size = 99999999999)
#applying the model
modelMulticlassNonLinearDuration<- ksvm(DURATION_RANGE~.,data=train,kernel="rbfdot")
#Getting summary of the model
summary(modelMulticlassLinearDuration)
#Prediction of test data
pred <- predict(modelMulticlassLinearDuration,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$DURATION_RANGE)
tab
#Accuracy check
agreement <- pred==test$DURATION_RANGE
tabag <- table(agreement)
tabag
#Laoding the data
setwd("E:/INST737/Milestone3")
dataset<-read.csv('onehotenc_clean.csv')
columns<-names(dataset)
#attach(dataset)
dataset$CASE_STATUS_0.0 <- NULL
dataset$AGENT_PRESENT_0.0 <- NULL
#aligning the variables
str(dataset)
dataset$CASE_STATUS_1.0 <- as.factor(dataset$CASE_STATUS_1.0)
#dataset$CASE_STATUS_0.0 <- as.factor(dataset$CASE_STATUS_0.0)
dataset$AGENT_PRESENT_1.0 <- as.factor(dataset$AGENT_PRESENT_1.0)
#dataset$AGENT_PRESENT_0.0 <- as.factor(dataset$AGENT_PRESENT_0.0)
dataset$OCCUPATION <- as.factor(dataset$OCCUPATION)
dataset$WAGE_RATE_OF_PAY_FROM_HOUR<-as.numeric(dataset$WAGE_RATE_OF_PAY_FROM_HOUR)
dataset$HOURLY_WAGE<-as.numeric(dataset$HOURLY_WAGE)
#dataset$WAGE_RATE_OF_PAY_FROM_HOUR_RANGE = cut(dataset$WAGE_RATE_OF_PAY_FROM_HOUR,c(0,10,20,30,40,50,60,70,80,90,100))
#dataset$HOURLY_WAGE_RANGE = cut(dataset$HOURLY_WAGE,c(0,10,20,30,40,50,60,70,80,90,100))
dataset$DURATION_RANGE = cut(dataset$DURATION,c(0,10,20,30,40,50,60,70,80,90,100))
# creation of test and train samples
df <- data.frame(dataset)
#install.packages("dplyr")
library(dplyr)
library(kernlab)
randomsample=sample_n(df, 100000)
#write.csv(randomsample,"C:\\Users\\kjain307\\Documents\\GitHub\\INST737-UniversityOfMaryland-DataScience-H1BAnalysis\\Milestone2\\encoding\\sample.csv")
smp_size <- floor(0.80 * nrow(randomsample))
set.seed(123)
train_generator <- sample(seq_len(nrow(randomsample)),size=smp_size)
train <- randomsample[train_generator,]
test<- randomsample[-train_generator,]
memory.limit(size = 99999999999)
#applying the model
modelMulticlassLinearDuration<- ksvm(DURATION_RANGE~.,data=train,kernel="vanilladot")
#Getting summary of the model
summary(modelMulticlassNonLinearDuration)
#Prediction of test data
pred <- predict(modelMulticlassNonLinearDuration,newdata=test)
length(pred)
#Confusion matrix generation
tab<- table(pred,test$DURATION_RANGE)
tab
#Accuracy check
agreement <- pred==test$DURATION_RANGE
tabag <- table(agreement)
tabag
install.packages("caret")
